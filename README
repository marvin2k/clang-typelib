matthias question on llvm-dev
 - http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-July/037776.html
another question on SE
 - https://stackoverflow.com/questions/24484388/dumping-memory-layout-with-clang
bug-report for debian-helper scripts on llvm-org
 - http://llvm.org/bugs/show_bug.cgi?id=20132

"PCX" is a python parser to generate xml from the ast
 - http://stackoverflow.com/a/23984908/3520187

see the rock-dev discussion about the progress of this beauty
 - http://www.dfki.de/pipermail/rock-dev/2014-July/004727.html


shell scripts
-------------

calling "printer.sh" for base::JointState will give us:
    time ./printer.sh base::JointState $ROCK_ROOT/base/types/base/JointState.hpp -I$ROCK_ROOT/base/types
...
*** Dumping AST Record Layout
   0 | struct base::JointState
   0 |   double position
   8 |   float speed
  12 |   float effort
  16 |   float raw
     | [sizeof=24, dsize=20, align=8
     |  nvsize=20, nvalign=8]
./printer.sh base::JointState ~/TransTerrA/rock/base/types/base/JointState.hpp  0.51s user 0.02s system 98% cpu 0.546 total


using ready-made clang stuff
============================

installing clang
----------------

see "install_clang.sh"

clang tools
-----------

use clang-check to print the ast in a human-readable way:
    clang-check dummy.cpp -ast-dump -ast-dump-filter SomeSpace

or listing of _all_ type-definitions. note that we can directly provide a header
file without compile-unit or compile_commands. just provide all needed options
after the double-dash (path to database can be given with "-p"):
    clang-check dummy/minimal_header.h -ast-list -- -x c++

use tooling infrastructure
--------------------------

add it to the clang-CMakeLists and create a symlink:
    tool_name=extractor
    echo 'add_subdirectory(${tool_name})' >> ${git_location}/tools/clang/tools/extra/CMakeLists.txt
    ln -s `readlink -f ${tool_name}` ${git_location}/tools/clang/tools/extra/${tool_name}

configure llvm/clang using cmake

compile the llvm-codebase. note that you can't just simply compile only your
tool, some files will be missing (builtin headers for example).
    cd ${build_location}
    make
    ./bin/extractor $HOME/clang-typelib.git/dummy/minimal_header.h -- \
        -x c++

or, in the rock-case:
    ./bin/extractor $ROCK_ROOT/base/types/base/Pose.hpp -- \
        -I$ROCK_ROOT/base/types \
        -I/usr/include/eigen3 \
        -x c++

precompiled-headers
-------------------

the current "extractor" tool takes 15seconds for one simple base-type header...
too much. using precompiled headers might speed this up. see for example
http://llvm.org/releases/3.3/tools/clang/docs/PCHInternals.html

# when calling clang with "-cc1" it does not find any headers...
clang -cc1 dummy/minimal_header.h -emit-pch -o dummy/minimal_header.h.pch -I/usr/include -I/usr/include/x86_64-linux-gnu -x c++

# but when reusing it, it will error with "exception handling was disabled in
# PCH file but is currently enabled"...
clang -include-pch test.h.pch -c dummy/dummy.cpp -x c++-header 

# furthermore, when using the tooling-binary, the following error is produced:
# error: PCH file built from a different branch ((http://llvm.org/git/clang.git
#     adb6bc4cf0e09a5aca773ab7680bc4c7bf581909) (http://llvm.org/git/llvm.git
#     5c6aa738fb3325ae499454877f1e2926d2368135)) than the compiler ()

